import { useEffect, useState } from "react";
import { Steps } from "antd";
import { useNavigate, useLocation } from "react-router-dom";
import "./CheckoutPage.scss";
import QRCode from "react-qr-code";
import {
  createBooking,
  deleteBooking,
} from "../../services/bookingServices/bookingServices.ts";
import {
  createPaymentQR,
  createPayment,
} from "../../services/paymentServices/paymentService.ts";
import { createVNPayPayment } from "../../services/paymentServices/vnpayService.ts";

const { Step } = Steps;

export default function CheckoutPage() {
  const [booking, setBooking] = useState<any>(null);
  const [step, setStep] = useState<number>(1);
  const navigate = useNavigate();
  const [paymentData, setPaymentData] = useState<any>(null);

  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phone: "",
    note: "",
    pickup: "",
    dropoff: "",
    paymentMethod: "",
  });
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    const userData = localStorage.getItem("user");
    if (userData) {
      const parsedUser = JSON.parse(userData);
      setCurrentUser(parsedUser);
      console.log("üßç [CHECKOUT] user hi·ªán t·∫°i:", parsedUser);
    } else {
      console.log("‚ö™ [CHECKOUT] Kh√¥ng c√≥ user (kh√°ch v√£ng lai)");
    }

    const bookingStorage = localStorage.getItem("bookingData");
    if (bookingStorage) {
      const parsedBooking = JSON.parse(bookingStorage);
      setBooking(parsedBooking);
    } else {
      console.log("‚ö†Ô∏è [CHECKOUT] Kh√¥ng t√¨m th·∫•y bookingData!");
    }
  }, []);

  useEffect(() => {
    if (currentUser) {
      setFormData((prev) => ({
        ...prev,
        fullName: `${currentUser.firstName || ""} ${
          currentUser.lastName || ""
        }`.trim(),
        email: currentUser.email || "",
        phone: currentUser.phoneNumber || "",
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        fullName: "",
        email: "",
        phone: "",
      }));
    }
  }, [currentUser]);

  const location = useLocation();

  useEffect(() => {
    if (location.state?.step === 3) {
      setStep(3);
    }
  }, [location.state]);

  if (!booking) {
    return <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t xe!</p>;
  }

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handlePrev = async () => {
    if (step === 2 && booking?.id) {
      try {
        console.log(
          "üßπ [Checkout] X√≥a booking khi quay l·∫°i Step 1:",
          booking.id
        );
        await deleteBooking(booking.id);
        setBooking({ ...booking, id: null });
      } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a booking:", err);
      }
    }

    setStep(step - 1);
  };

  // Step 1 -> Step 2
  const handleNextStep1 = async () => {
    try {
      console.log("üßç‚Äç‚ôÇÔ∏è [LOG] currentUser:", currentUser);
      console.log("üß© [LOG] userId g·ª≠i l√™n:", currentUser?.id || "Guest");

      const unitPrice = booking.trip?.price?.priceTrip
        ? Number(booking.trip.price.priceTrip)
        : 0;

      const requestData = {
        userId: currentUser?.id || null, // üü© G·ª¨I L√äN BACKEND
        coachTripId: booking.trip?.id,
        totalAmount: booking.seats.length * unitPrice,
        seats: booking.seats.map((s: any) => ({
          seatId: s.id,
          price: unitPrice,
        })),
        customers: [
          {
            fullName: formData.fullName,
            phone: formData.phone,
            email: formData.email || null,
          },
        ],
        points: [
          ...(formData.pickup
            ? [
                {
                  type: "pickup",
                  locationId: booking.trip.route.fromLocation.id,
                  note: formData.pickup,
                },
              ]
            : []),
          ...(formData.dropoff
            ? [
                {
                  type: "dropoff",
                  locationId: booking.trip.route.toLocation.id,
                  note: formData.dropoff,
                },
              ]
            : []),
        ],
      };

      console.log("üì¶ [LOG] Payload g·ª≠i createBooking:", requestData);

      const bookingRes = await createBooking(requestData);
      if (bookingRes.data.errCode === 0) {
        const newBooking = bookingRes.data.data;
        setBooking({ ...booking, id: newBooking.id });
        setStep(2);
      } else {
        alert(bookingRes.data.errMessage);
      }
    } catch (err) {
      alert("C√≥ l·ªói khi l∆∞u th√¥ng tin ƒë·∫∑t v√©!");
    }
  };

  // Step 2 -> Step 3
  const handleNextStep2 = async () => {
    try {
      console.log("üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n:", formData.paymentMethod);
      if (!booking?.id) return alert("Ch∆∞a c√≥ booking!");
      if (!formData.paymentMethod) return alert("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c!");

      const unitPrice = Number(booking.trip?.price?.priceTrip || 0);
      const total = booking.seats.length * unitPrice;

      if (formData.paymentMethod === "BANKING") {
        const res = await createPaymentQR({
          bookingId: booking.id,
          amount: total,
        });
        if (res.data?.errCode === 0) {
          setPaymentData(res.data.data);
        } else alert(res.data?.errMessage);
        return;
      }

      if (formData.paymentMethod === "CASH") {
        const res = await createPayment({
          bookingId: booking.id,
          method: "CASH",
          amount: total,
        });
        if (res.data?.errCode === 0) setStep(3);
        else alert(res.data?.errMessage);
        return;
      }

      if (formData.paymentMethod === "CARD") {
        const res = await createVNPayPayment({
          bookingId: booking.id,
          amount: total,
          bankCode: "NCB",
        });

        if (res.data?.errCode === 0 && res.data?.paymentUrl) {
          console.log("üîó Redirect VNPAY URL:", res.data.paymentUrl);
          window.location.href = res.data.paymentUrl;
        } else {
          alert(res.data?.errMessage || "L·ªói khi t·∫°o thanh to√°n VNPAY!");
        }
        return;
      }
    } catch (err: any) {
      console.error("‚ùå Error creating payment:", err);
      alert(err?.response?.data?.errMessage || "C√≥ l·ªói khi t·∫°o thanh to√°n!");
    }
  };

  const handleFinish = () => {
    localStorage.removeItem("bookingData");
    navigate("/");
  };

  const downloadInvoice = (bookingId: number) => {
    const link = document.createElement("a");
    link.href = `http://localhost:8080/api/v1/bookings/${bookingId}/invoice`;
    link.setAttribute("download", `invoice-${bookingId}.pdf`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (formData.paymentMethod === "BANKING" && paymentData) {
    console.log("üëâ QRCode value = ", paymentData.qrCode);
  }

  return (
    <div className="checkout-page">
      {/* ====== Ph·∫ßn 1: Th√¥ng tin ƒë·∫∑t v√© ====== */}
      <div className="booking-summary">
        <h3>Th√¥ng tin ƒë·∫∑t v√©</h3>

        {/* M·ªôt chi·ªÅu */}
        {booking.trip && (
          <>
            <div className="trip-row-tille">
              {booking.trip.route.fromLocation.nameLocations} ‚Üí{" "}
              {booking.trip.route.toLocation.nameLocations}
            </div>

            <div className="trip-row">
              <span className="label">Kh·ªüi h√†nh:</span>
              <span className="value">{booking.trip.startTime}</span>
            </div>
            <div className="trip-row">
              <span className="label">Lo·∫°i xe:</span>
              <span className="value">{booking.trip.vehicle.name}</span>
            </div>
            <div className="trip-row">
              <span className="label">Bi·ªÉn s·ªë xe:</span>
              <span className="value">{booking.trip.vehicle.licensePlate}</span>
            </div>
            <div className="trip-row">
              <span className="label">Gh·∫ø:</span>
              <span className="value">
                {booking.seats.map((s: any) => s.name).join(", ")}
              </span>
            </div>

            {/* --- T·ªïng thanh to√°n (M·ªôt chi·ªÅu) --- */}
            {(() => {
              const unitPrice = booking.trip?.price?.priceTrip
                ? Number(booking.trip.price.priceTrip)
                : 0;
              const total = booking.seats.length * unitPrice;
              const finalPay = total;
              return (
                <div className="payment-summary">
                  <h4>T·ªïng thanh to√°n</h4>
                  <div className="trip-row">
                    <span className="label">Gi√° gh·∫ø chi·ªÅu ƒëi:</span>
                    <span className="value">
                      {total.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="trip-row">
                    <span className="label">T·ªïng ti·ªÅn:</span>
                    <span className="value">
                      {total.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="trip-row final">
                    <span className="label">Thanh to√°n:</span>
                    <span className="value">
                      {finalPay.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                </div>
              );
            })()}
          </>
        )}

        {/* Kh·ª© h·ªìi */}
        {booking.goTrip && booking.returnTrip && (
          <>
            <h4>Chi·ªÅu ƒëi</h4>
            <div className="trip-row-tille">
              {booking.goTrip.route.fromLocation.nameLocations} ‚Üí{" "}
              {booking.goTrip.route.toLocation.nameLocations}
            </div>
            <div className="trip-row">
              <span className="label">Kh·ªüi h√†nh:</span>
              <span className="value">{booking.goTrip.startTime}</span>
            </div>
            <div className="trip-row">
              <span className="label">Lo·∫°i xe:</span>
              <span className="value">{booking.goTrip.vehicle.name}</span>
            </div>
            <div className="trip-row">
              <span className="label">Bi·ªÉn s·ªë xe:</span>
              <span className="value">
                {booking.goTrip.vehicle.licensePlate}
              </span>
            </div>
            <div className="trip-row">
              <span className="label">Gh·∫ø:</span>
              <span className="value">
                {booking.goSeats.map((s: any) => s.name).join(", ")}
              </span>
            </div>

            <h4>Chi·ªÅu v·ªÅ</h4>
            <div className="trip-row-tille">
              {booking.returnTrip.route.fromLocation.nameLocations} ‚Üí{" "}
              {booking.returnTrip.route.toLocation.nameLocations}
            </div>
            <div className="trip-row">
              <span className="label">Kh·ªüi h√†nh:</span>
              <span className="value">{booking.returnTrip.startTime}</span>
            </div>
            <div className="trip-row">
              <span className="label">Lo·∫°i xe:</span>
              <span className="value">{booking.returnTrip.vehicle.name}</span>
            </div>
            <div className="trip-row">
              <span className="label">Bi·ªÉn s·ªë xe:</span>
              <span className="value">
                {booking.returnTrip.vehicle.licensePlate}
              </span>
            </div>
            <div className="trip-row">
              <span className="label">Gh·∫ø:</span>
              <span className="value">
                {booking.returnSeats.map((s: any) => s.name).join(", ")}
              </span>
            </div>

            {/* --- T·ªïng thanh to√°n (Kh·ª© h·ªìi) --- */}
            {(() => {
              const goPrice =
                booking.goSeats.length *
                (booking.goTrip?.price?.priceTrip
                  ? Number(booking.goTrip.price.priceTrip)
                  : 0);
              const returnPrice =
                booking.returnSeats.length *
                (booking.returnTrip?.price?.priceTrip
                  ? Number(booking.returnTrip.price.priceTrip)
                  : 0);

              const total = goPrice + returnPrice;
              const finalPay = total;

              return (
                <div className="payment-summary">
                  <h4>T·ªïng thanh to√°n</h4>
                  <div className="trip-row">
                    <span className="label">Gi√° gh·∫ø chi·ªÅu ƒëi:</span>
                    <span className="value">
                      {goPrice.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="trip-row">
                    <span className="label">Gi√° gh·∫ø chi·ªÅu v·ªÅ:</span>
                    <span className="value">
                      {returnPrice.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="trip-row final">
                    <span className="label">Thanh to√°n:</span>
                    <span className="value">
                      {finalPay.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                </div>
              );
            })()}
          </>
        )}
      </div>

      {/* ====== Ph·∫ßn 2: Quy tr√¨nh checkout ====== */}
      <div className="checkout-steps">
        <Steps
          current={step - 1}
          className="step-indicator"
          labelPlacement="vertical"
        >
          <Step title="Th√¥ng tin ƒë·∫∑t gh·∫ø" />
          <Step title="Thanh to√°n" />
          <Step title="Ho√†n t·∫•t" />
        </Steps>

        {step === 1 && (
          <div className="checkout-step step-1">
            <h3 className="step-title">Th√¥ng tin li√™n h·ªá</h3>
            <div className="form-grid">
              <div className="form-group">
                <label>
                  H·ªç T√™n <span className="required">*</span>
                </label>
                <input
                  type="text"
                  name="fullName"
                  value={formData.fullName}
                  onChange={handleChange}
                />
              </div>

              <div className="form-group">
                <label>
                  Email <span className="required">*</span>
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                />
              </div>

              <div className="form-group">
                <label>
                  S·ªë ƒêi·ªán Tho·∫°i <span className="required">*</span>
                </label>
                <div className="phone-input">
                  <select>
                    <option>(VN) +84</option>
                  </select>
                  <input
                    type="text"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                  />
                </div>
              </div>

              <div className="form-group">
                <label>GHI CH√ö</label>
                <input
                  type="text"
                  name="note"
                  value={formData.note}
                  onChange={handleChange}
                  placeholder="Ghi ch√∫"
                />
              </div>

              <div className="form-group">
                <label>NH·∫¨P ƒêI·ªÇM ƒê√ìN CHI TI·∫æT</label>
                <input
                  type="text"
                  name="pickup"
                  value={formData.pickup}
                  onChange={handleChange}
                />
              </div>

              <div className="form-group">
                <label>NH·∫¨P ƒêI·ªÇM TR·∫¢ CHI TI·∫æT</label>
                <input
                  type="text"
                  name="dropoff"
                  value={formData.dropoff}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className="form-actions">
              <button onClick={handleNextStep1} className="btn next-btn">
                Ti·∫øp t·ª•c
              </button>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="checkout-step step-2">
            <h3 className="step-title">Ch·ªçn h√¨nh th·ª©c thanh to√°n</h3>

            <label
              className={`payment-option ${
                formData.paymentMethod === "BANKING" ? "active" : ""
              }`}
            >
              <input
                type="radio"
                name="paymentMethod"
                value="BANKING"
                checked={formData.paymentMethod === "BANKING"}
                onChange={handleChange}
              />
              <div className="option-content">
                <h4>Thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng</h4>
                <p>
                  Qu√©t m√£ QR ho·∫∑c chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp theo th√¥ng tin ng√¢n
                  h√†ng c·ªßa nh√† xe. Admin s·∫Ω x√°c nh·∫≠n trong v√≤ng 5‚Äì10 ph√∫t.
                </p>
                <span className="fee">Mi·ªÖn ph√≠ d·ªãch v·ª•</span>
              </div>
            </label>

            {formData.paymentMethod === "BANKING" && paymentData && (
              <div className="qr-section">
                <div className="qr-left">
                  <h4>Qu√©t m√£ QR</h4>
                  <QRCode value={paymentData.qrCode} size={200} />
                </div>

                <div className="qr-right">
                  <h4>Th√¥ng tin chuy·ªÉn kho·∫£n</h4>
                  <p>
                    <b>Ng√¢n h√†ng:</b> Vietcombank (VCB)
                  </p>
                  <p>
                    <b>S·ªë t√†i kho·∫£n:</b> 0123456789
                  </p>
                  <p>
                    <b>Ch·ªß t√†i kho·∫£n:</b> NGUYEN VAN A
                  </p>
                  <p>
                    <b>N·ªôi dung:</b> {paymentData.addInfo}
                  </p>

                  <button
                    className="btn next-btn"
                    onClick={() => setStep(3)}
                    style={{
                      marginTop: "16px",
                      color: "#fff",
                      backgroundColor: "#4d940e",
                      border: "none",
                    }}
                  >
                    T√¥i ƒë√£ thanh to√°n
                  </button>
                </div>
              </div>
            )}

            <label
              className={`payment-option ${
                formData.paymentMethod === "CARD" ? "active" : ""
              }`}
            >
              <input
                type="radio"
                name="paymentMethod"
                value="CARD"
                checked={formData.paymentMethod === "CARD"}
                onChange={handleChange}
              />
              <div className="option-content">
                <h4>Thanh to√°n b·∫±ng th·∫ª</h4>
                <p>H·ªó tr·ª£ Visa, MasterCard, n·ªôi ƒë·ªãa. An to√†n, ti·ªán l·ª£i.</p>
                <span className="fee">Ph√≠ d·ªãch v·ª•: 5.000ƒë</span>
              </div>
            </label>

            <label
              className={`payment-option ${
                formData.paymentMethod === "CASH" ? "active" : ""
              }`}
            >
              <input
                type="radio"
                name="paymentMethod"
                value="CASH"
                checked={formData.paymentMethod === "CASH"}
                onChange={handleChange}
              />
              <div className="option-content">
                <h4>Thanh to√°n sau khi l√™n xe</h4>
                <p>Thanh to√°n tr·ª±c ti·∫øp cho t√†i x·∫ø khi l√™n xe.</p>
                <span className="fee">Mi·ªÖn ph√≠ d·ªãch v·ª•</span>
              </div>
            </label>

            <div className="form-actions">
              <button onClick={handlePrev} className="btn prev-btn">
                Quay l·∫°i
              </button>

              {!(formData.paymentMethod === "BANKING" && paymentData) && (
                <button onClick={handleNextStep2} className="btn next-btn">
                  Ti·∫øp t·ª•c
                </button>
              )}
            </div>
          </div>
        )}

        {step === 3 && (
          <div className="checkout-step step-3">
            <h3 className="step-title">Ho√†n t·∫•t</h3>
            <p>
              C·∫£m ∆°n b·∫°n <b>{formData.fullName}</b>, ƒë∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c
              ghi nh·∫≠n.
            </p>
            <p>
              Ch√∫ng t√¥i s·∫Ω li√™n h·ªá qua s·ªë <b>{formData.phone}</b> ƒë·ªÉ x√°c nh·∫≠n.
            </p>
            <div className="form-actions">
              <button
                onClick={() => downloadInvoice(booking.id)}
                className="btn next-btn"
              >
                T·∫£i h√≥a ƒë∆°n PDF
              </button>
              <button onClick={handleFinish} className="btn prev-btn">
                Quay l·∫°i trang ch·ªß
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
